name: Elixir Tests

on:
  pull_request:
    branches: [ main, master ]
    types: [opened, synchronize, reopened, edited]
    
  workflow_dispatch:
jobs:
  test:
    name: Build and test
    runs-on: ubuntu-latest
    
    services:
      db:
        image: postgres:14
        ports: ['5432:5432']
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    permissions:
      contents: write
      pull-requests: write
      actions: write
      
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: '1.14.x'
          otp-version: '25.x'
      
      - name: Restore dependencies cache
        uses: actions/cache@v3
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ runner.os }}-mix-
      
      - name: Install dependencies
        run: mix deps.get
      
      - name: Run tests
        run: mix test
        env:
          MIX_ENV: test
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/jump_ai_pipeline_test
      
      - name: Generate coverage report
        run: mix test --cover --export-coverage default 
        env:
          MIX_ENV: test
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/jump_ai_pipeline_test
      
      - name: Generate coverage summary
        run: |
          echo "## Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          mix coverage.summary | tee /dev/stderr >> $GITHUB_STEP_SUMMARY
        env:
          MIX_ENV: test
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/jump_ai_pipeline_test
          
      - name: Generate coverage json
        run: mix coverage.json 
        env:
          MIX_ENV: test
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/jump_ai_pipeline_test
      
      - name: Archive coverage results
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: cover/
          retention-days: 14

      - name: Install dependencies
        run: cd ai-test-writer && npm install
        
      - name: Build action
        run: cd ai-test-writer && npm run build
          
      - name: Check if last commit is from AI Test Writer
        id: check_commit
        run: |
          LAST_COMMIT_MSG=$(git log -1 --pretty=%B)
          if [[ $LAST_COMMIT_MSG == *"#ai-test"* ]]; then
            echo "Last commit was generated by AI Test Writer, skipping analysis"
            echo "skip_analysis=true" >> $GITHUB_OUTPUT
          else
            echo "skip_analysis=false" >> $GITHUB_OUTPUT
          fi
          
      - name: AI Test Writer
        uses: ./ai-test-writer
        if: github.event_name == 'pull_request' && steps.check_commit.outputs.skip_analysis != 'true'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          anthropic-api-key: ${{ secrets.ANTHROPIC_API_KEY }}
          coverage-path: cover/coverage.json

